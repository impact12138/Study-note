Webpack:一个现代JavaScript应用程序的静态模块
打包器；
入口[entry]:指示webpack应该使用哪个模块,来作为
构建其内部依赖图的开始。
module.exports={
   entry: './path/to/my/enter/file.js'
};

出口[output]:告诉webpack在哪里输出它所创建的
bundles,以及如何命名这些文件，默认值为./dist
const path = require('path');
module.exports={
  entry: './path/to/my/entry/file.js',
  output:{
    path: path.resolve(__dirname,'dist'),
    filename: 'my-first-webpack.bundle.js'
  }
 };

loader:让webpack能够去处理那些非javaScript文件
(webpack自身只理解JavaScript)。loader可以将所有
类型的文件转换为webpack能够处理的有效模块，
然后你就可以运用webpack的打包能力进行处理。
在更高层面，在webpack的配置中loader有两个目标：
1、test属性，用于标识出应该被对应的loader进行
转换的某个或某些文件。
2、use属性，表示进行转换时，应该使用哪个loader
const path= require('path');
const config = {
  output:{
    filename: 'my-first-webpack.bundle.js'
   },
   module:{
     rules: [
       { test:/\.txt$,use:'raw-loader'}
     ]
    }
   };
 module.exports = config;

插件[plugins]:loader被用于转换某些类型的模块，
而插件则可以用于执行范围更广的任务。插件的范围
包括，从打包优化和压缩，一直到重新定义环境中的变量。
插件接口功能极其强大，可以用于处理各种各样的
任务。
const HtmlWebpackPlugin = 
require('html-webpack-plugin');//通过npm安装
const webpack = require('webpack');//用于访问内置插件

const config= {
 module:{
   rules: [
     { test:/\.txt$/,use: 'raw-loader' }
    ]
   },
   plugins: [
     new webpack.optimize.UglifyJsPlugin(),
     new HtmlWebpackPlugin({template: './src/index.html'})
    ]
   };
  module.exports =config;

模式:通过选择development或production之中的一个，来设置
mode参数，你可以启用相应模式下的webpack内置的优化
module.exports = {
  mode: 'production'
 };