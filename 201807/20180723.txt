对象：函数对象、普通对象
普通对象就是原型对象
Function.prototype除外，它是函数对象但它没有prototype属性

原型对象的主要作用是用于继承

原型链：
JS在创建对象的时候，都有一个__proto__的内置属性，用于指向创建它的的函数对象的prototype。
Object.prototype.__proto__ = null
把有指针的对象一直追寻到Object.prototype.__proto__为null的链叫做原型链

constructor属性：
原型对象prototype中都有个预定义的constructor属性，用来引用它的函数对象。这是一种循环引用

总结：
原型和原型链是JS实现继承的一种模型；
原型链的形成是靠__proto__而非prototype；
原型链的核心：属性共享和独立的控制。当你的对象实例需要独立的属性，所有做法的本质都是在对象实例里面创建属性。

原型链：
构造函数、原型和实例的关系：
构造函数都有一个属性prototype，这个属性是一个对象；
原型对象prototype里面有一个constructor属性，该属性指向原型对象所属的构造函数；
实例对象都有一个__proto__属性，该属性也指向构造函数的原型对象，它是一个非标准属性，不可以用于编程

prototype与__proto__的关系：
prototype是构造函数的属性；
__proto__是实例对象的属性
			--这两者都指向同一个对象

属性搜索：
在访问对象的某个成员的时候回先在对象中找是否存在；
如果当前对象中没有就在构造函数的原型对象中找；
如果原型对象中没有找到就在原型对象的原型中找；
直到Object的原型对象的原型是null为止；


Function：
		―――所有函数都是Function的实例
本地对象：独立于宿主环境（浏览器）的对象――包括object、array、date、regexp、function、error、number、string、boolean；
内置对象――包括Math、Global(window,在js中就是全局变量),使用的时候不需要new；
宿主对象――包括自定义对象、DOM、BOM








